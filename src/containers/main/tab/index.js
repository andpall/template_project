import React, {useState} from 'react';
import {View, Dimensions, Animated} from 'react-native';
import Svg, {Path, Circle} from 'react-native-svg';
import {useTheme} from '@react-navigation/native'
import * as shape from 'd3-shape';

import TabItem from '../../../components/tabItem';
import styles from './styles';

const {width} = Dimensions.get('window');
const radius = width * 0.08912037037037036
const tabWidth = width / 4;
const widthSvg = width * 0.3056;
const heightSvg = width * 0.1528;
const viewBoxWidth = width * 0.4583;
const viewBoxHeight = width * 0.22917;
const diff = tabWidth / 2 - widthSvg / 2;

const sh = shape
  .line()
  .x(d => d[0])
  .y(d => d[1])
  .curve(shape.curveBasis)([
  [0.5083041135081515, 0.5000008447564119],
  [2.4964497411131554, 0.54979611151141],
  [4.496909349782858, 0.703637523079291],
  [6.467206219008658, 0.9631144499603659],
  [8.435901448223566, 1.3359892104968893],
  [10.371132056832149, 1.8200026383278833],
  [12.286230745063666, 2.4206156472702838],
  [14.166310097918096, 3.1349585294968274],
  [15.98560209688977, 3.950613834485271],
  [17.759231560121947, 4.870055609328051],
  [19.488680730699674, 5.8908134514679835],
  [21.152151137407763, 6.993853987437702],
  [22.764822524962796, 8.181559720028046],
  [24.307386033161833, 9.430747915875585],
  [25.8058327869705, 10.75346419380785],
  [27.262764548719677, 12.145372282317279],
  [28.650352122782476, 13.569807913948356],
  [30.003135700823066, 15.05225035419297],
  [31.304213768821807, 16.56550461504632],
  [32.56674354041204, 18.115324089435493],
  [33.79362744966888, 19.696871383218298],
  [34.98766067230428, 21.305487866252893],
  [36.142585715859255, 22.9239205960291],
  [37.27902005599836, 24.573171293696994],
  [38.390347970382045, 26.236584067684817],
  [39.487544690752806, 27.923548957057502],
  [40.55563341464411, 29.60366310519605],
  [41.613930598583245, 31.300096606601723],
  [42.664369814805866, 33.00962684017124],
  [43.70054693049964, 34.71524526037894],
  [44.73278159863682, 36.42743454252322],
  [45.762961355975285, 38.14304879131397],
  [46.79297373927291, 39.858942111461104],
  [47.824706285287604, 41.57196860767452],
  [48.86004653077721, 43.278982384664126],
  [49.90930331950337, 44.99048414048173],
  [50.95758878512299, 46.675922775875115],
  [52.032303865295646, 48.372676378464696],
  [53.118586776368176, 50.05015037692236],
  [54.22720617760457, 51.71807911370799],
  [55.35161754042107, 53.35968802889404],
  [56.51199005550281, 54.99672602478165],
  [57.702113085479965, 56.61186205696245],
  [58.924667616315375, 58.200627817418884],
  [60.18243987872424, 59.75837959019647],
  [61.46846701152092, 61.269040031763645],
  [62.815320431705146, 62.76136979117473],
  [64.19654498967388, 64.19641444410124],
  [65.63587328247604, 65.58998389481643],
  [67.1266090019381, 66.92555654378397],
  [68.67227465248685, 68.19726155208264],
  [70.27651355780814, 69.39902671533738],
  [71.93108596670177, 70.5169028335066],
  [73.63870840894162, 71.54636235596888],
  [75.4020974143016, 72.48287773210278],
  [77.22396951255558, 73.3219214112869],
  [79.07969665361131, 74.04917589467135],
  [80.98336260085276, 74.6688503619748],
  [82.92155195106245, 75.17562168937758],
  [84.87882912811712, 75.56753370468914],
  [86.86875218468556, 75.84967177262226],
  [88.85851361389831, 76.02135080964864],
  [90.8442754513801, 76.08896741320538],
  [92.84951411837571, 76.05708336554062],
  [94.84501665003722, 75.9226622534452],
  [96.84161325277657, 75.67933617074407],
  [98.79132706893579, 75.3301898916189],
  [100.73780604472996, 74.8649237705252],
  [102.65013232927348, 74.28737219184418],
  [104.52804230402727, 73.59709578516777],
  [106.3714556410267, 72.79396066435612],
  [108.15541587116478, 71.8917368642299],
  [109.88263952421545, 70.89495193541049],
  [111.55584312995258, 69.80813342851935],
  [113.17774321815008, 68.6358088941779],
  [114.75105631858185, 67.38250588300754],
  [116.25698865733443, 66.07226560740894],
  [117.71048982046042, 64.70232196687485],
  [119.11498347611824, 63.27838107932298],
  [120.47377641141023, 61.80595426084554],
  [121.79006055196015, 60.290361391672626],
  [123.05741881691291, 58.7485894306153],
  [124.28870239699647, 57.17437494560909],
  [125.48671541643324, 55.57239148098317],
  [126.65415661810155, 53.94713694543225],
  [127.7936212940143, 52.302936829481474],
  [128.90760320094742, 50.64394739820159],
  [129.99849646121896, 48.97415885917442],
  [131.0771147646027, 47.28391193587141],
  [132.13699505238347, 45.590116961939295],
  [133.180291043921, 43.89636347322974],
  [134.22575079629635, 42.17853403642337],
  [135.25854719574806, 40.46728099366824],
  [136.28895379884722, 38.75204484155387],
  [137.31885814235173, 37.03597147537037],
  [138.3501477630195, 35.32220679040782],
  [139.38471019760834, 33.61389668195633],
  [140.43284395528656, 31.900523227801916],
  [141.47967913820787, 30.212667474370214],
  [142.55257751284256, 28.51288604920281],
  [143.63669794294452, 26.83180793565251],
  [144.73402077871884, 25.172733718122323],
  [145.86431832885665, 23.513253026425247],
  [147.01236060983658, 21.88334677058213],
  [148.1986399793646, 20.261804658517615],
  [149.40753948475418, 18.67796265528647],
  [150.6604191282397, 17.11205653944215],
  [151.94113965247936, 15.592551771933357],
  [153.27208257231982, 14.10138664874546],
  [154.65707376318574, 12.644937624335288],
  [156.07897968263578, 11.250013023324682],
  [157.5620869523047, 9.901726314269803],
  [159.09959240511517, 8.616420999299411],
  [160.68355882924934, 7.408550509655848],
  [162.328578184565, 6.274752659132937],
  [164.0384640788067, 5.221383458910464],
  [165.80442399731368, 4.261470838277641],
  [167.6029249875661, 3.4111574566786707],
  [169.46127625316305, 2.660594412028091],
  [171.35404253766345, 2.022753860648387],
  [173.28105511555003, 1.4973545994064306],
  [175.24196596247413, 1.0838165936282202],
  [177.2207902342193, 0.7831805691883456],
  [179.21537499156037, 0.5918583019708574],
  [181.20693680261016, 0.5062262084704453],
]);

const d = `${sh}`;

function CustomTabBar({state, descriptors, navigation}) {
  const focusedOptions = descriptors[state.routes[state.index].key].options;
  const [leftValue] = useState(new Animated.Value(diff + tabWidth * 0));
  const {colors} = useTheme()
  console.log(colors)
  const animeStyles = {
    left: leftValue,
  };

  if (focusedOptions.tabBarVisible === false) {
    return null;
  }

  const onPress = (isFocused, index, route) => {
    if (!isFocused) {
      navigation.navigate(route.name);
      Animated.spring(leftValue, {
        toValue: diff + tabWidth * index,
        tension: 0,
        friction: 3,
        useNativeDriver: false,
      }).start();
    }
  };

  return (
    <View style={[styles.container,{backgroundColor: colors.card}]}>
      <Animated.View style={[styles.animeView, animeStyles]}>
        <Svg
          width={widthSvg}
          height={heightSvg}
          viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}>
          <Path
            d={d}
            fill={colors.background}
            stroke={colors.background}
            strokeWidth="2"
          />
          <Circle
            cx={viewBoxWidth / 2}
            cy={viewBoxHeight / 2 - 10}
            r={radius}
            fill="white"
          />
        </Svg>
      </Animated.View>
      {state.routes.map((route, index) => (
        <TabItem
          key={index}
          route={route}
          descriptors={descriptors}
          isFocused={state.index === index}
          index={index}
          onPress={onPress}
        />
      ))}
    </View>
  );
}

export default CustomTabBar;
